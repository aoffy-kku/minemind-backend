basePath: /
definitions:
  model.CreateUserRequestJSON:
    properties:
      displayName:
        type: string
      email:
        type: string
      password:
        type: string
      watchId:
        type: string
    required:
    - displayName
    - email
    - password
    - watchId
    type: object
  model.MeJSON:
    properties:
      displayName:
        type: string
      email:
        type: string
      roles:
        items:
          type: string
        type: array
      watchId:
        type: string
    type: object
  model.RoleJSON:
    properties:
      createdAt:
        type: string
      id:
        type: string
    type: object
  model.UserJSON:
    properties:
      begin:
        type: string
      createdAt:
        type: string
      createdBy:
        type: string
      displayName:
        type: string
      email:
        type: string
      end:
        type: string
      roles:
        items:
          type: string
        type: array
      updatedAt:
        type: string
      updatedBy:
        type: string
      watchId:
        type: string
    type: object
  utils.HttpResponse:
    properties:
      code:
        type: integer
      message:
        type: string
    type: object
info:
  contact: {}
  description: MineMind API
  license: {}
  title: MineMind API
  version: "1.0"
paths:
  /v1/roles:
    get:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.RoleJSON'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.HttpResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/utils.HttpResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.HttpResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.HttpResponse'
      summary: Get roles
      tags:
      - Roles
  /v1/users:
    get:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.UserJSON'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.HttpResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/utils.HttpResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.HttpResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.HttpResponse'
      security:
      - ApiKeyAuth: []
      summary: Get users
      tags:
      - User
    post:
      consumes:
      - application/json
      parameters:
      - description: body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/model.CreateUserRequestJSON'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/model.CreateUserRequestJSON'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.HttpResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.HttpResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.HttpResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.HttpResponse'
      summary: Create user
      tags:
      - User
  /v1/users/{id}:
    get:
      consumes:
      - application/json
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.UserJSON'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.HttpResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/utils.HttpResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.HttpResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.HttpResponse'
      security:
      - ApiKeyAuth: []
      summary: Get user by id
      tags:
      - User
  /v1/users/me:
    get:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.MeJSON'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.HttpResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/utils.HttpResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.HttpResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.HttpResponse'
      security:
      - ApiKeyAuth: []
      summary: Get me
      tags:
      - User
schemes:
- http
- https
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
