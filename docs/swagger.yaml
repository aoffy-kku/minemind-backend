basePath: /
definitions:
  handler.MeasurementResponse:
    properties:
      mood:
        $ref: '#/definitions/handler.MoodResponse'
        type: object
      sleep:
        $ref: '#/definitions/handler.SleepResponse'
        type: object
      steps:
        $ref: '#/definitions/handler.StepResponse'
        type: object
      stress:
        $ref: '#/definitions/handler.StressResponse'
        type: object
    type: object
  handler.Mood:
    properties:
      count:
        type: integer
      mood:
        type: string
    type: object
  handler.MoodMeasurement:
    properties:
      moods:
        items:
          $ref: '#/definitions/handler.Mood'
        type: array
    type: object
  handler.MoodResponse:
    properties:
      month:
        $ref: '#/definitions/handler.MoodMeasurement'
        type: object
      today:
        $ref: '#/definitions/handler.MoodMeasurement'
        type: object
      week:
        $ref: '#/definitions/handler.MoodMeasurement'
        type: object
    type: object
  handler.SleepMeasurement:
    properties:
      rem:
        type: integer
      timestamp:
        type: string
      ttb:
        type: integer
    type: object
  handler.SleepResponse:
    properties:
      month:
        items:
          $ref: '#/definitions/handler.SleepMeasurement'
        type: array
      today:
        items:
          $ref: '#/definitions/handler.SleepMeasurement'
        type: array
      week:
        items:
          $ref: '#/definitions/handler.SleepMeasurement'
        type: array
    type: object
  handler.StepMeasurement:
    properties:
      timestamp:
        type: string
      value:
        type: number
    type: object
  handler.StepResponse:
    properties:
      month:
        items:
          $ref: '#/definitions/handler.StepMeasurement'
        type: array
      today:
        items:
          $ref: '#/definitions/handler.StepMeasurement'
        type: array
      week:
        items:
          $ref: '#/definitions/handler.StepMeasurement'
        type: array
    type: object
  handler.StressMeasurement:
    properties:
      normal:
        type: integer
      stress:
        type: integer
      timestamp:
        type: string
    type: object
  handler.StressResponse:
    properties:
      month:
        items:
          $ref: '#/definitions/handler.StressMeasurement'
        type: array
      today:
        items:
          $ref: '#/definitions/handler.StressMeasurement'
        type: array
      week:
        items:
          $ref: '#/definitions/handler.StressMeasurement'
        type: array
    type: object
  handler.Version:
    properties:
      code:
        type: string
      url:
        type: string
    type: object
  model.AccessTokenJSON:
    properties:
      createdAt:
        type: string
      createdBy:
        type: string
      id:
        type: string
      pair:
        type: string
      userId:
        type: string
    type: object
  model.AnalysisJSON:
    properties:
      class:
        type: integer
      cortisol:
        $ref: '#/definitions/model.CortisolJSON'
        type: object
      cortisolId:
        type: string
      createdAt:
        type: string
      createdBy:
        type: string
      id:
        type: string
      mode:
        type: integer
      score:
        type: number
      status:
        type: integer
      updatedAt:
        type: string
      updatedBy:
        type: string
      userEvaluation:
        $ref: '#/definitions/model.UserEvaluationJSON'
        type: object
      userEvaluationId:
        type: string
      userId:
        type: string
    type: object
  model.CortisolJSON:
    properties:
      cortisol:
        type: number
      createdAt:
        type: string
      id:
        type: string
      timestamp:
        type: integer
      userId:
        type: string
    type: object
  model.CreateAnalysisRequestJSON:
    properties:
      mode:
        type: integer
    required:
    - mode
    type: object
  model.CreateCortisolRequestJSON:
    properties:
      cortisol:
        type: number
      timestamp:
        type: integer
    required:
    - cortisol
    - timestamp
    type: object
  model.CreateMultipleCortisol:
    properties:
      data:
        items:
          $ref: '#/definitions/model.CreateCortisolRequestJSON'
        type: array
    required:
    - data
    type: object
  model.CreateUserDiaryMoodRequestJSON:
    properties:
      moods:
        items:
          type: string
        type: array
    type: object
  model.CreateUserDiaryRequestJSON:
    properties:
      content:
        type: string
      moods:
        items:
          type: string
        type: array
    type: object
  model.CreateUserEvaluationRequestJSON:
    properties:
      description:
        type: string
      evaluationId:
        type: string
      name:
        type: string
      questions:
        items:
          $ref: '#/definitions/model.Question'
        type: array
    type: object
  model.CreateUserMoodJSON:
    properties:
      name:
        items:
          type: string
        type: array
    required:
    - name
    type: object
  model.CreateUserRequestJSON:
    properties:
      displayName:
        type: string
      email:
        type: string
      password:
        type: string
      watchId:
        type: string
    required:
    - displayName
    - email
    - password
    - watchId
    type: object
  model.EvaluationJSON:
    properties:
      createdAt:
        type: string
      createdBy:
        type: string
      description:
        type: string
      id:
        type: string
      name:
        type: string
      questions:
        items:
          $ref: '#/definitions/model.QuestionJSON'
        type: array
    type: object
  model.MeJSON:
    properties:
      birthDate:
        type: string
      displayName:
        type: string
      email:
        type: string
      roles:
        items:
          type: string
        type: array
      watchId:
        type: string
    type: object
  model.OldUser:
    properties:
      created:
        type: string
      display_name:
        type: string
      email:
        type: string
      modified:
        type: string
      phone_number:
        type: string
      username:
        type: string
      watch_id:
        type: string
    type: object
  model.OldUserLoginRequestJSON:
    properties:
      password:
        type: string
      username:
        type: string
    required:
    - password
    - username
    type: object
  model.Option:
    properties:
      id:
        type: integer
      title:
        type: string
      value:
        type: integer
    type: object
  model.OptionJSON:
    properties:
      id:
        type: integer
      title:
        type: string
      value:
        type: integer
    type: object
  model.Question:
    properties:
      id:
        type: integer
      options:
        items:
          $ref: '#/definitions/model.Option'
        type: array
      title:
        type: string
    type: object
  model.QuestionJSON:
    properties:
      id:
        type: integer
      options:
        items:
          $ref: '#/definitions/model.OptionJSON'
        type: array
      title:
        type: string
    type: object
  model.RoleJSON:
    properties:
      createdAt:
        type: string
      id:
        type: string
    type: object
  model.UpdateAccessTokenJSON:
    properties:
      id:
        type: string
      pair:
        type: string
    required:
    - id
    - pair
    type: object
  model.UpdateUserMoodJSON:
    properties:
      active:
        type: boolean
      name:
        type: string
    required:
    - name
    type: object
  model.UserDiaryJSON:
    properties:
      content:
        type: string
      createdAt:
        type: string
      createdBy:
        type: string
      id:
        type: string
      moods:
        items:
          type: string
        type: array
      userId:
        type: string
    type: object
  model.UserDiaryMoodJSON:
    properties:
      createdAt:
        type: string
      createdBy:
        type: string
      id:
        type: string
      moods:
        items:
          type: string
        type: array
      userId:
        type: string
    type: object
  model.UserEvaluationJSON:
    properties:
      createdAt:
        type: string
      createdBy:
        type: string
      description:
        type: string
      evaluationId:
        type: string
      id:
        type: string
      name:
        type: string
      questions:
        items:
          $ref: '#/definitions/model.QuestionJSON'
        type: array
      userId:
        type: string
    type: object
  model.UserJSON:
    properties:
      begin:
        type: string
      birthDate:
        type: string
      createdAt:
        type: string
      createdBy:
        type: string
      displayName:
        type: string
      email:
        type: string
      end:
        type: string
      roles:
        items:
          type: string
        type: array
      updatedAt:
        type: string
      updatedBy:
        type: string
      watchId:
        type: string
    type: object
  model.UserLoginRequestJSON:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  model.UserMoodJSON:
    properties:
      active:
        type: boolean
      createdAt:
        type: string
      createdBy:
        type: string
      id:
        type: string
      name:
        type: string
      userId:
        type: string
    type: object
  utils.HttpResponse:
    properties:
      code:
        type: integer
      message:
        type: string
    type: object
info:
  contact: {}
  description: MineMind API
  license: {}
  title: MineMind API
  version: "1.0"
paths:
  /v1/access-token/renew:
    post:
      consumes:
      - application/json
      parameters:
      - description: body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/model.UpdateAccessTokenJSON'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.AccessTokenJSON'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.HttpResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/utils.HttpResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.HttpResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.HttpResponse'
      summary: Get access token
      tags:
      - AccessToken
  /v1/admin/users/cortisol:
    get:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.CortisolJSON'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.HttpResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/utils.HttpResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.HttpResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.HttpResponse'
      security:
      - ApiKeyAuth: []
      summary: Get users cortisol
      tags:
      - Admin
  /v1/admin/users/diary:
    get:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.UserDiaryJSON'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.HttpResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/utils.HttpResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.HttpResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.HttpResponse'
      security:
      - ApiKeyAuth: []
      summary: Get users diary
      tags:
      - Admin
  /v1/admin/users/evaluation:
    get:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.UserEvaluationJSON'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.HttpResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/utils.HttpResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.HttpResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.HttpResponse'
      security:
      - ApiKeyAuth: []
      summary: Get users evaluations
      tags:
      - Admin
  /v1/cortisol:
    post:
      consumes:
      - application/json
      parameters:
      - description: body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/model.CreateCortisolRequestJSON'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/model.CortisolJSON'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.HttpResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.HttpResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.HttpResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.HttpResponse'
      security:
      - ApiKeyAuth: []
      summary: Create cortisol
      tags:
      - Cortisol
  /v1/cortisol/backup:
    post:
      consumes:
      - application/json
      parameters:
      - description: body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/model.CreateMultipleCortisol'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            items:
              $ref: '#/definitions/model.CortisolJSON'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.HttpResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.HttpResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.HttpResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.HttpResponse'
      security:
      - ApiKeyAuth: []
      summary: Create multiple cortisol
      tags:
      - Cortisol
  /v1/evaluations:
    get:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.EvaluationJSON'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.HttpResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/utils.HttpResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.HttpResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.HttpResponse'
      summary: Get evaluations
      tags:
      - Evaluation
  /v1/login:
    post:
      consumes:
      - application/json
      parameters:
      - description: body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/model.OldUserLoginRequestJSON'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.AccessTokenJSON'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.HttpResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/utils.HttpResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.HttpResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.HttpResponse'
      summary: Login
      tags:
      - Public
  /v1/measurement:
    get:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.MeasurementResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.HttpResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/utils.HttpResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.HttpResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.HttpResponse'
      security:
      - ApiKeyAuth: []
      summary: Get measurement
      tags:
      - Measurement
  /v1/roles:
    get:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.RoleJSON'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.HttpResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/utils.HttpResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.HttpResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.HttpResponse'
      summary: Get roles
      tags:
      - Roles
  /v1/token:
    post:
      consumes:
      - application/json
      parameters:
      - description: body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/model.UpdateAccessTokenJSON'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.AccessTokenJSON'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.HttpResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/utils.HttpResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.HttpResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.HttpResponse'
      summary: Get access token
      tags:
      - Public
  /v1/user/me:
    get:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.OldUser'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.HttpResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/utils.HttpResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.HttpResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.HttpResponse'
      security:
      - ApiKeyAuth: []
      summary: Get me
      tags:
      - OldUser
  /v1/users:
    get:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.UserJSON'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.HttpResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/utils.HttpResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.HttpResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.HttpResponse'
      security:
      - ApiKeyAuth: []
      summary: Get users
      tags:
      - User
    post:
      consumes:
      - application/json
      parameters:
      - description: body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/model.CreateUserRequestJSON'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/model.CreateUserRequestJSON'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.HttpResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.HttpResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.HttpResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.HttpResponse'
      security:
      - ApiKeyAuth: []
      summary: Create user
      tags:
      - User
  /v1/users/{id}:
    get:
      consumes:
      - application/json
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.UserJSON'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.HttpResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/utils.HttpResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.HttpResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.HttpResponse'
      security:
      - ApiKeyAuth: []
      summary: Get user by id
      tags:
      - User
  /v1/users/analysis:
    get:
      consumes:
      - application/json
      parameters:
      - description: date
        in: query
        name: date
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.AnalysisJSON'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.HttpResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/utils.HttpResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.HttpResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.HttpResponse'
      security:
      - ApiKeyAuth: []
      summary: Get analysis by date
      tags:
      - Analysis
    post:
      consumes:
      - application/json
      parameters:
      - description: body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/model.CreateAnalysisRequestJSON'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/utils.HttpResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.HttpResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/utils.HttpResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.HttpResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.HttpResponse'
      security:
      - ApiKeyAuth: []
      summary: Create analysis
      tags:
      - Analysis
  /v1/users/analysis/{id}:
    delete:
      consumes:
      - application/json
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
          schema:
            $ref: '#/definitions/utils.HttpResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.HttpResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/utils.HttpResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.HttpResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.HttpResponse'
      security:
      - ApiKeyAuth: []
      summary: Delete user analysis
      tags:
      - Analysis
  /v1/users/analysis/mode/{mode}:
    get:
      consumes:
      - application/json
      parameters:
      - description: mode
        in: query
        name: mode
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.AnalysisJSON'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.HttpResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/utils.HttpResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.HttpResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.HttpResponse'
      security:
      - ApiKeyAuth: []
      summary: Get analysis by mode
      tags:
      - Analysis
  /v1/users/birthdate/{birthdate}:
    patch:
      consumes:
      - application/json
      parameters:
      - description: birthdate
        in: path
        name: birthdate
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.HttpResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.HttpResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/utils.HttpResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.HttpResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.HttpResponse'
      security:
      - ApiKeyAuth: []
      summary: Update birth date
      tags:
      - User
  /v1/users/cortisol/latest:
    get:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.CortisolJSON'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.HttpResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.HttpResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.HttpResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.HttpResponse'
      security:
      - ApiKeyAuth: []
      summary: Get latest cortisol
      tags:
      - Cortisol
  /v1/users/diary:
    get:
      consumes:
      - application/json
      parameters:
      - description: date
        in: query
        name: date
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.UserDiaryJSON'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.HttpResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/utils.HttpResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.HttpResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.HttpResponse'
      security:
      - ApiKeyAuth: []
      summary: Get user diary by date
      tags:
      - UserDiary
    post:
      consumes:
      - application/json
      parameters:
      - description: body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/model.CreateUserDiaryRequestJSON'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.UserDiaryJSON'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.HttpResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/utils.HttpResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.HttpResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.HttpResponse'
      security:
      - ApiKeyAuth: []
      summary: Create user diary
      tags:
      - UserDiary
  /v1/users/diary/{id}:
    delete:
      consumes:
      - application/json
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
          schema:
            $ref: '#/definitions/utils.HttpResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.HttpResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/utils.HttpResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.HttpResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.HttpResponse'
      security:
      - ApiKeyAuth: []
      summary: Delete user diary
      tags:
      - UserDiary
  /v1/users/diary/mood:
    get:
      consumes:
      - application/json
      parameters:
      - description: date
        in: query
        name: date
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.UserDiaryMoodJSON'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.HttpResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/utils.HttpResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.HttpResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.HttpResponse'
      security:
      - ApiKeyAuth: []
      summary: Get user diary mood by date
      tags:
      - UserDiaryMood
    post:
      consumes:
      - application/json
      parameters:
      - description: body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/model.CreateUserDiaryMoodRequestJSON'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.UserDiaryMoodJSON'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.HttpResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/utils.HttpResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.HttpResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.HttpResponse'
      security:
      - ApiKeyAuth: []
      summary: Create user diary mood
      tags:
      - UserDiaryMood
  /v1/users/evaluation:
    get:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.UserEvaluationJSON'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.HttpResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/utils.HttpResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.HttpResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.HttpResponse'
      security:
      - ApiKeyAuth: []
      summary: Get latest user evaluation
      tags:
      - UserEvaluation
    post:
      consumes:
      - application/json
      parameters:
      - description: body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/model.CreateUserEvaluationRequestJSON'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.UserEvaluationJSON'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.HttpResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/utils.HttpResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.HttpResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.HttpResponse'
      security:
      - ApiKeyAuth: []
      summary: Create user evaluation
      tags:
      - UserEvaluation
  /v1/users/login:
    post:
      consumes:
      - application/json
      parameters:
      - description: body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/model.UserLoginRequestJSON'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.AccessTokenJSON'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.HttpResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/utils.HttpResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.HttpResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.HttpResponse'
      summary: Login
      tags:
      - User
  /v1/users/me:
    get:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.MeJSON'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.HttpResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/utils.HttpResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.HttpResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.HttpResponse'
      security:
      - ApiKeyAuth: []
      summary: Get me
      tags:
      - User
  /v1/users/mood:
    get:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.UserMoodJSON'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.HttpResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/utils.HttpResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.HttpResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.HttpResponse'
      security:
      - ApiKeyAuth: []
      summary: Get user moods
      tags:
      - UserMood
    post:
      consumes:
      - application/json
      parameters:
      - description: body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/model.CreateUserMoodJSON'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.UserMoodJSON'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.HttpResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/utils.HttpResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.HttpResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.HttpResponse'
      security:
      - ApiKeyAuth: []
      summary: Create user moods
      tags:
      - UserMood
  /v1/users/mood/{mood_id}:
    patch:
      consumes:
      - application/json
      parameters:
      - description: mood_id
        in: path
        name: mood_id
        required: true
        type: string
      - description: body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/model.UpdateUserMoodJSON'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.UserMoodJSON'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.HttpResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/utils.HttpResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.HttpResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.HttpResponse'
      security:
      - ApiKeyAuth: []
      summary: Update user moods
      tags:
      - UserMood
  /v1/version:
    get:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.Version'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.HttpResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/utils.HttpResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.HttpResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.HttpResponse'
      summary: Get version
      tags:
      - Version
schemes:
- http
- https
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
